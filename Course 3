import pandas as pd 

# each column of df represents the prices of an asset
df = pd.DataFrame([[100, 100, 100],
                   [102, 101, 99],
                   [103, 102, 102],
                   [102, 104, 100],
                   [107, 101, 97],
                   [105, 101, 99]
                   ], columns=["Asset 1", "Asset 2", "Asset 3"])


# The goal is to use the solver from the package Scipy to find the portfolio with the best performance.
# The program to solve is as follow: 

'''
    
  Min -max_perf 
  
  variables:
    - weights 
  
  under the constraints:
    - Sum weights = 1
    - Each weight is bewteen 0.2 and 1
    
'''

# We need to minimize our objective function cause the solver from Scipy only minimize function and not maximize. 
# That's why we put a minus before the objective function.

from scipy.optimize import minimize

# Let's define our objective function: 
def max_perf( weights ):
    return sum( weights * performances )
    

# The constraint: 
    
constraints = [ { 'type': 'eq' , 'fun' : lambda x: np.sum(x) - 1} ]  
# each constraint is a dictionnary
# The constraints are put inside a list
# Each dictionnary has two keys: 
# _ 'type' that has ‘eq’ for equality, ‘ineq’ for inequality as value 
# _ 'fun' that has a function constraint as value 
# The equality function constraint returns zero when the constrain is repespected
# The inequality function constraint returns a positive value when the constrain is respected


# Bounds:
    
bounds = tuple((0.2, 1) for _ in range(3))
# Composed of tuple(s) inside a tuple. 
# The number of tuple inside the main tuple is equal to the number of variable that the solver can change. 
# Each tuple has two element, the first one is the min value the variable can take, the second is the max value.


# Initial guess:
    
weights_init = np.ones(size) / len(df.columns)
# This is with the weights_init that the code will start to run the solver to find the optimal weight set. 


# Tolerance:
    
tolerance = 1 / np.power(10, 15)
# This is the precision of our solver 


# Our program: 
opt = minimize(lambda w: -1 * max_perf(w),
               weights_init,
               method = 'SLSQP',
               bounds = bounds,
               constraints = constraints, 
               tol = tolerance
               )



# To have access of the optimal weight set: 
print(opt["x"])


'''

The goal of the following code is to build a portfolio, to calculate its volatility and to build a trading strategy

'''


import pandas as pd
from yahoofinancials import YahooFinancials

# Let's download data from Yahoo Finance
yahoo_financials = YahooFinancials(['AAPL', 'MC.PA'])
prices = yahoo_financials.get_historical_price_data("2019-07-10", "2021-05-30", "daily")
apple_prices = pd.DataFrame(prices['AAPL']['prices']).drop('date', axis=1).set_index('formatted_date')['close']
lvmh_prices = pd.DataFrame(prices['MC.PA']['prices']).drop('date', axis=1).set_index('formatted_date')['close']

# Let's built a function to calculate the returns
def returns(prices):
    return prices.pct_change()

# Let's built a function to have the value of an asset among our portfolio
# It is like if we have invested weight euros on the asset and that we are checking at each time the value of our investment 
def values(prices, weight):
    values = (1+returns(prices)).cumprod()
    values.iloc[0] = 1
    values *= weight
    return values


VL_ptf = pd.DataFrame()
VL_ptf['ptf']= values(apple_prices, 0.3) + values(lvmh_prices, 0.7)  # We invested 0.3 euros on apple and 0.7 on lvmh and we track the values of our portfolio


Assets_returns = pd.DataFrame()
Assets_returns['apple'] = returns(apple_prices)
Assets_returns['lvmh'] = returns(lvmh_prices)


# We calculate the volatility of the portfolio:
    
weights = pd.array([0.3, 0.7])  # We need the weight set 

var_cov = Assets_returns.cov()  # We calculate the variance covariance matrix

portfolio_variance = np.dot(weights.T, np.dot(var_cov, weights))  # We calculate the variance

portfolio_vol = np.sqrt(portfolio_variance)  # Thanks to the variance we can calculate the risk of the portfolio (= volatility)



# Let's built the trading strategy: if the price of the asset is below its moving average we are invested in the next day, otherwise no

moving_average = apple_prices.rolling(window = 10).mean().iloc[9:]  # The moving average over 10 days

invested_or_not_the_next_day = apple_prices.iloc[9:] < moving_average  # Let's check when the prices are below the moving average

invested_or_not = invested_or_not_the_next_day.shift(1).iloc[1:]  # We shift from one day to know if we are invested or not with no lag 

returns = returns(apple_prices).iloc[10:]

return_strategy = invested_or_not  * returns

VL_strategy =  values(return_strategy, 1)


# We calcul the performance to check if the strategy beats the underlying asset
performance_strat = VL_strategy.iloc[-1] / VL_strategy.iloc[0] - 1
performance_apple = apple_prices.iloc[-1] / apple_prices.iloc[3] - 1

